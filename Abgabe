https://bw-ki.de/app/submit-project

Teamname
Intelliplane
Alle Mitglieder des Teams mit ihrem vollen Namen und Benutzernamen
Ole Petersen (olep), Moritz Barth (morix42), Simon Hock (Eddie), Fynn Starke (fynsta)
Titel des Projekts
Intelliplane


Praktische Relevanz und Innovationskraft

Was ist das Ziel des Projekts?
Das Ziel des Projektes ist es einen selbst lernenden Autopiloten für ein Modellflugzeug
 zu erstellen, der für Verkehrsflugzeuge übliche Ziele erreicht.

Warum ist euer Projekt wichtig?
Autopiloten übernehmen bei Flugzeugen, Schiffen und Autos zunehmend wichtige undtragende Rollen und sind nicht mehr weg zu
 denken. Herkömmliche, auf Regelungssystemen basierende Autopiloten erfordern eine manuelle Konfiguration der Parameter, um gut zu funktionieren und haben teilweise Probleme mit schwierigen Wettersituationen.
 Durch den Einsatz von maschinellem Lernen lassen sich diese Probleme potenziell umgehen.

Wer kann euere Ergebnisse verwenden? Was ist der Anwendungsfall?
Mit nur geringen Veränderungen lässt sich das System auf fast jedes Luftfahrtzeug anwenden. So lassen sich Modellflugzeuge, Lieferungsdrohnen bis hin zu Verkehrsfugzeugen steuern.
Zu beachten ist allerdings, dass unser Autopilot lediglich die Low-Level-Steuerung übernimmt, d.h. die Navigation muss durch eine andere Logik übernommen werden.

Eingesetzte Methoden

Beschreibung eures Datensatzes (Herkunft, Größe, Klassen...)
Wir haben bei Testflügen mit dem Modellflugzeug in regelmäßigen Abständen Parameter gemessen, die die Bewegung, Lage und Steuerung desselben im Raum möglichst vollständig beschreiben.
Dazu gehören Höhe, Position, Geschwindigkeit, Anstellwinkel ("pitch"), Schräglage ("bank"), Flugrichtung ("heading"), Höhen- und Querruderausschlaf sowie das Gas.
Dazu wurde ein eigenes Telemetriesystem entwickelt, das auf einen Kreisel, einen Beschleunigungssensor, einen barometrischen Drucksensor sowie einen GPS-Empfänger zurückgreift.
Aufgenommen wurden damit vier Flüge mit jeweils circa 10 min Flugzeit.

Aufbereitung der Daten und sonstige Vorbereitungen
(%%das auch...)#

Beschreibung eurer Methoden (Aufbau neuronales Netz, machine learning model, Trainieren und Testen der Daten...)
Da wir den Autopiloten nicht in Echtzeit auf dem Flugzeug testen können, mussten wir zwei neuronale Netze entwickeln: Bei dem einen handelt
es sich um einen Flugsimulator, welcher aus vorangegangenen Mess- und Steuerdaten die nächsten Daten vorhersagt. Dieses kann mit herkömmlichen supervised learning trainiert werden.
Mit Hilfe dieses Netzes kann dann der eigentiche Autopilot trainiert werden. Der Autopilot wird darauf trainiert, aus bestimmten Startsituationen heraus in einigen Zeitschritten einige Parameter wie den Anstellwinkel auf einen bestimmten Wert zu steuern.
Da beide Aufgaben das Arbeiten mit Zeitreihen beinhalten, sind beide neuronalen Netze als rekurrente Netzwerke ausgelegt. Der Simulator sagt aus den aktuellen Parametern und Steuerungssignalen sowie seinem internen Speicher (auch "state" genannt) die Parameter im nächsten Zeitpunkt voraus und darf seinen Speicher beschreiben.
Ganz ähnlich funkioniert der Autopilot: Er bestimmt aus den aktuellen Parametern und Steuerungssignalen die Steuerungssignale zum nächsten Zeitpunkt.
Im Training des Simulators wird der Simulator mithilfe der RNN-Klasse von Tensorflow nach und nach auf alle Zeitpunkte einer Zeitreihe aufgerufen. Dabei wird der interne Speicher von einem Zeitpunkt zum nächsten weitergegeben.So haben Daten aus mehreren Zeitpunkten Einfluss auf das Ergebnis.
Am Ende wird nur die Ähnlichkeit des letzten Aufrufs des Simulators mit den tatsächlichen nächsten Parameterwerten von der Fehlerfunktion bewertet.

Das Training des Autopilots basiert auf einem weitern Netzwerk. Dieses hat als Eingabe die Ausgangssituation und als Ausgabe (Eine Zeitreihe von Parameter- und Steuerungswerten) und als Ausgabe das Verhalten des Flugzeugs in den nächsten Zeitschritten. Dafür benutzt es den Autopiloten und den Simulator.
Dabei sind die Parameter des Autopiloten im Gegensatz zu denen des Simulators trainierbar (dieser ist vortrainiert). Der Fehler des Netzwerk wird dann aus der Abweichung dieser Vorausgesagten Parameter von vorbestimmten Zielwerten (Horizontalflug, keine Schräglage...) berechnet.
So wird der Autopilot darauf trainiert, diese Zielwerte zu erreichen.
Nun stellt sich natürlich die Frage, was man mit einem Autopiloten anfangen soll, der nur horizontal in eine Richtung fliegen kann. Unser Verfahren, dem Autopiloten Steuereingaben zu machen, ist, dem Autopiloten keine absoluten Daten, sondern Daten relativ zum Zielwert zu übergeben.
Beispielsweise wird die Höhe immer auf 0m gesteuert. Wenn sich das Flugzeug dann 20m unter der Zielhöhe befindet, wird dem Autopiloten eine Höhe von -20m gemeldet. So lässt sich das Training sehr vereinfachen.
Es spricht aber nichts dagegen, dem Autopiloten in einer späteren Version auch eine Zielgeschwindigkeit zu übergeben.



Euer Ergebnis

Wie habt ihr euer Projekt ausgewertet? Welche Genauigkeit habt ihr auf Trainingsdaten und auf Testdaten erreicht?
Mit dem Ziel, dass das Flugzeug einfach eine Höhe hält, wurden gute Ergebnisse im Simulator erzielt. Ein Test am wirklichen Modellflugzeug hat unseren Aufwand überschritten.
Andere Ziele (einen Punkt im Raum ansteuern, Warteschleifen fliegen, o.ä.) lassen sich durch eine Veränderung der Fehlerfunktion relativ leicht implementieren.

Was habt ihr entwickelt?
Zusammengefasst haben wir einen Flugsimulator entwickelt, der das Verhalten eines Flugzeugen bei Steuerinputs aufgrund der vorherigen Daten vorher sagt, und einen
Autopiloten, welcher mit einem Ziel (Flugzeug gerade halen, Punkt ansteuern) Steuerbefehle so gibt, dass dieses erreicht wird.

Was benötigt man, um euer Ergebnis nutzen zu können? (Handy, GitHub, Internet, Rasberry Pi...)
Grundsätzlich braucht man ein Flugzeug, welches unserem in der Art seiner Sensorik und Elektronik ähnelt, wahrscheinlich sind geringe Modifikationen des Quellcodes von
Nöten. Fernen muss das Flugzeug mit einem Arduino o.ä. bestückt sein, welcher von einem Laptop Daten empfangen und bearbeiten kann. Unser Projekt ist vollständig auf
GitHub zu finden.

Anleitung für den Nutzer
(%%das wird was...)


Kritische Reflexion des eigenen Projekts

Auf welche Probleme seid ihr gestoßen?
Schwierig zu erreichen war, dass das Netz auch nur halbwegs brauchbare Outputs gab. Vor dem rekurrenten Netz haben wir andere (%%Ole!!) Netze ausprobiert und mit verschiedenen
Schichtanzahlen und Vermaschungen experimentiert.

Was ist das größte Potential eures Projekts?
Möchte nicht jeder auf einem Nurflügler in den Sonnenuntergang fliegen ohne dauernd die Hände am Steuer zu haben? Dies könnte der erste Schritt in diese Richtung sein!(%%denkt euch was aus, kp)
 
Was ist die größte Schwachstelle eures Projekts?

Wie würdet ihr euer Projekt vorantreiben, wenn ihr unendlich viele Ressourcen und Zeit hättet?
Das Ziel, dass der Autopilot direkt ein Flugzeug steuert haben wir nicht erreichen können, es wäre aber die Krönung des Ganzen!